name: Free-RDP-NonInteractive

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download LocalXpose CLI
        shell: powershell
        run: |
          $zip = "loclx.zip"
          Invoke-WebRequest -Uri "https://api.localxpose.io/api/downloads/loclx-windows-amd64.zip" -OutFile $zip -UseBasicParsing
          Expand-Archive -Path $zip -DestinationPath "." -Force

          # Ensure correct binary name (avoid overwrite itself)
          if (Test-Path ".\localxpose.exe") {
              if (-not (Test-Path ".\loclx.exe")) {
                  Copy-Item -Path ".\localxpose.exe" -Destination ".\loclx.exe" -Force
                  Write-Host "Copied localxpose.exe -> loclx.exe"
              } else {
                  Write-Host "loclx.exe already exists, skipping copy."
              }
          } else {
              Write-Host "loclx.exe found or extracted, nothing to copy."
          }

      - name: Authenticate LocalXpose CLI (non-interactive)
        shell: powershell
        env:
          LOCLX_TOKEN: ${{ secrets.LOCLX_TOKEN }}
        run: |
          if (-not $Env:LOCLX_TOKEN -or $Env:LOCLX_TOKEN.Trim() -eq "") {
            Write-Error "LOCLX_TOKEN secret is missing."
            exit 1
          }

          try {
            & .\loclx.exe authtoken $Env:LOCLX_TOKEN
            Write-Host "✅ Authenticated using token."
          } catch {
            Write-Warning "Authtoken failed or not supported. Make sure session exists on runner."
          }

          # Show account status for debugging
          & .\loclx.exe account status 2>&1 | ForEach-Object { Write-Host $_ }

      - name: Enable RDP & Firewall
        shell: powershell
        run: |
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Write-Host "✅ RDP enabled and firewall configured."

      - name: Start TCP Tunnel for RDP
        shell: powershell
        run: |
          $publicPort = 4455
          $localPort = 3389
          Write-Host "Starting TCP tunnel: local $localPort -> public $publicPort"

          $proc = Start-Process -FilePath ".\loclx.exe" -ArgumentList "tunnel","tcp","--to","127.0.0.1:$localPort","--port",$publicPort -WindowStyle Hidden -PassThru
          Start-Sleep -Seconds 6

          # Display expected public address
          Write-Host "🌐 Public RDP address: us.loclx.io:$publicPort"
          Write-Host "LocalXpose process id: $($proc.Id)"

          # Optional: show tunnel list from CLI
          $tunnels = & .\loclx.exe tunnel list 2>&1
          Write-Host "Tunnel list output:"
          $tunnels | ForEach-Object { Write-Host $_ }

      - name: Keep Session Alive
        shell: cmd
        run: ping -t 127.0.0.1 >nul
